import { BaseView, cleanify, DELETE, ExistResponse, GET, PathVariable, POST, PUT, RequestBody, requiredAtLeastOneParam, requiredParams, View } from '@rester/core';
import { getEntity } from '@rester/orm';
import { {{NAME}}Entity } from './{{name}}.entity';
import { {{NAME}}ID, {{NAME}}InsertParams, {{NAME}}UpdateParams } from './{{name}}.model';

// create, remove, modify, take, search
// one, more

@View('{{name}}')
export class {{NAME}}View extends BaseView {

  private entity: {{NAME}}Entity;

  async init() {
    this.entity = getEntity({{NAME}}Entity);
  }

  @POST()
  async create(
    @RequestBody() { author, content }: {{NAME}}InsertParams,
  ) {
    requiredParams(content);
    return new ExistResponse({
      statusCode: 201,
      data: await this.entity.insertOne({
        author,
        content,
        like: 0,
        createdAt: new Date(),
        updatedAt: new Date(),
      }),
      message: '{{NAME}} created failed.',
    });
  }

  @DELETE(':id')
  async remove(@PathVariable('id') id: {{NAME}}ID) {
    return this.entity.deleteOne(id);
  }

  @PUT(':id')
  async modify(
    @PathVariable('id') id: {{NAME}}ID,
    @RequestBody() { author, content }: {{NAME}}UpdateParams,
  ) {
    requiredAtLeastOneParam(author, content);
    return new ExistResponse({
      data: await this.entity.updateOne(id, cleanify({ author, content, updateAt: new Date() })),
      message: '{{NAME}} not found.',
    });
  }

  @GET(':id')
  async take(
    @PathVariable('id') id: {{NAME}}ID,
  ) {
    return new ExistResponse({
      data: await this.entity.findOne(id),
      message: '{{NAME}} not found.',
    });
  }

}
